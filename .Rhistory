for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}
}
}
sa
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
browser()
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}
}
}
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
browser()
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}
}
}
for(j in 1:length(ncol(landcover))){
browser()
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}
}
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
browser()
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
} browser()
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
browser()
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}
browser()}
}
for (i in 1:length(nrow(tau_mag))){
for (i in 1:length(nrow(tau_mag))){
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
browser()
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}
}
}
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
browser()
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}
}
}
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}browser()
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
browser()
}
}
}
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}
browser()
}
}
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}
browser()
}
}
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}
}
}
for (i in 1:5)
for (i in 1:5)
for (i in 1:5)
for (i in 1:5)
3
new
for (i in 1:5)
32
ne3
for (i in 1:5)
e
for (i in 1:5)
for (i in 1:5)
for (i in 1:5){ new_df <- cbind(new_df,i)
}
new_df <- as.data.frame()
new_df <- as.data.frame(NA)
for (i in 1:5){
new_df <- cbind(new_df,i)
}
new_df
for (i in 1:5){
new_df <- cbind(new_df,i=i)
}
new_df
new_df <- data.frame()
for (i in 1:5){
new_df <- cbind(new_df,i)
}
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_row <- c(tau_mag[i,j],landcover[i,j])
sa <- rbind(sa, new_row)
}
}
}
new_df <- as.data.frame()
as.data.frame
new_df <- data.frame()
data.frame
for (i in 1:5){
new_df <- rbind(new_df,i)
}
new_df
for (i in 1:length(nrow(tau_mag))){
for(j in 1:length(ncol(landcover))){
if (!is.na(tau_mag[i,j])&!is.na(landcover[i,j]==TRUE))
{  new_col <- cbind(tau_mag[i,j],landcover[i,j])
sa <- rbind(tau_mag[i,j], landcover[i,j])
}
}
}
View(sa)
library(sf)
library(terra)
library(forecast) # auto.arima function
library(lmtest)   # durbin-watson test: between 0-2
library(quantmod) # to backshift rainfall data
# demo: visualisation and regression of individual NDVI and rainfall time-series (Spain)
ndvi <- read.csv2("D:\\Courses\\Patern Recognicion\\5.week\\ndvi1.txt", header =F, sep="")
ndvi <- as.numeric(ndvi[,2])
#ndvi <- ndvi + 1:length(ndvi)/100
rf <- read.csv2("D:\\Courses\\Patern Recognicion\\5.week\\rf1.txt", header =F, sep="")
rf <- rf[,2]
ndvi
rf
plot(ndvi, type="l",col="black", main="NDVI")
plot(rf, type="l", col="red", main="RF")
cor(as.numeric(ndvi),as.numeric(rf),use="complete.obs") # data are correlated
model <- lm(as.numeric(ndvi) ~ as.numeric(rf)) # no lag effects included!
plot(model$residuals, type="l")
plot(ndvi) # model residuals still shows a clear seasonality!
plot(model$residuals, type="l")
summary(model)
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,1)) # backshift: 1 month
summary(model) # greater R2 compared to the former model, but...
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,3)) # backshift: 1 month
summary(model) # greater R2 compared to the former model, but...
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,10)) # backshift: 1 month
summary(model) # greater R2 compared to the former model, but...
acf(rf)
acf(as.numeric(rf))
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,12)) # backshift: 1 month
summary(model)
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,6))
summary(model)
model$coefficients
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,2)) # backshift: 1 month
model$coefficients
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,13)) # backshift: 1 month
model$coefficients
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,1)) # backshift: 1 month
model$coefficients
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,6)) # backshift: 1 month
model$coefficients
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,3)) # backshift: 1 month
model$coefficients
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,4)) # backshift: 1 month
model$coefficients
pacf(model)
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,1)) # backshift: 1 month
summary(model) # greater R2 compared to the former model, but...
plot(model$residuals, type="l")
plot(ndvi) # still seasonality in the residuals! 5.dk
model <- lm(as.numeric(ndvi) ~ Lag (as.numeric(rf) ,1)+ Lag (as.numeric(rf) ,2)) # considering two lags
summary(model) # even better!
<plot(model$residuals, type="l")
plot(model$residuals, type="l")
plot(ndvi)
dwtest(model) # Durbin-Watson-Test still indicates positive serial autocorrelation in the residuals
x=dwtest(model) # Durbin-Watson-Test still indicates positive serial autocorrelation in the residuals
x$method
x$statistic
acf(model$residuals)
model <- lm(as.numeric(ndvi) ~ as.numeric(rf)) # no lag effects included!
model <- lm(as.numeric(ndvi) ~ as.numeric(rf)) # no lag effects included!
model <- lm(as.numeric(ndvi) ~ as.numeric(rf)) # no lag effects included!
acf(model$residuals)
summary(model)
x=acr(model$residuals)
x=acf(model$residuals)
x
max(x)
max(x)
max(as.numeric(x))
max(as.double(x))
max(as.float(x))
max(as.integer(x))
max(as.data.frame(x))
class(x)
x = as.data.frame(x)
x = as.numeric(x)
x = as.matrix(x)
max(x)
class(x)
as.matrix(x)
x
x = acf(model$residuals)
model$df.residual
x
x[4]
class(x)
max(x$acf)
which(x,x$acf!=1,max(x$acf))
which(x,x$acf!==1,max(x$acf))
which(x,x$acf!="1",max(x$acf))
which(x$acf,x$acf!=1,max(x$acf))
which(x$acf!=1,max(x$acf))
if (x$acf!=0){}
if (x$acf!=0){}
if (x$acf!=0){print(max(x)) }
for (i in 1:x$acf){if (x$acf[i]!=0){print(max(x)) }}
x
for(i in 1:x$acf){
if (x$acf[i]!=1){x$acf[i]}
}
for(i in 1:as.numeric(x$acf){
for(i in 1:as.numeric(x$acf)){
if (as.numeric(x$acf)[i]!=1){x$acf[i]}
}
1:x$acf
matrix(1:x$acf)
data.frame(1:x$acf)
x$acf
for(i in 1:length(as.numeric(x$acf))){
if (as.numeric(x$acf)[i]!=1){x$acf[i]}
}
if (as.numeric(x$acf)[i]!=1){print(x$acf[i])}
for(i in 1:length(as.numeric(x$acf))){
if (as.numeric(x$acf)[i]!=1){print(x$acf[i])}
}
if (as.numeric(x$acf)[i]!=1){print(max(x$acf[i]))}
for(i in 1:length(as.numeric(x$acf))){
if (as.numeric(x$acf)[i]!=1){print(max(x$acf[i]))}
}
for(i in 1:length(as.numeric(x$acf))){
if (as.numeric(x$acf)[i]!=1){print(max(x$acf))}
}
a=data.frame()
for(i in 1:length(as.numeric(x$acf))){
if (as.numeric(x$acf)[i]!=1){a[i]=x$acf[i]}
}
for(i in 1:length(as.numeric(x$acf))){
if ((x$acf)[i]!=1){a[i]=x$acf[i]}
}
or(i in 1:length(as.numeric(x$acf))){
for(i in 1:length(as.numeric(x$acf))){
if (x$acf[i]!=1){a[i]=x$acf[i]}
}
x$acf
x[acf]
x$acf[1]
x$acf[3]
a=data.frame(nrow=nrow(x$acf)-1,ncol=ncol(x$acf))
for(i in 1:length(as.numeric(x$acf))){
if (x$acf[i]!=1){
a[i]=x$acf[i]}
}
a
a=data.frame(nrow=ncol(x$acf)-1,nrow=ncol(x$acf))
for(i in 1:length(as.numeric(x$acf))){
if (x$acf[i]!=1){
a[i]=x$acf[i]}
}
a
max(a)
library(pysch)
library(psych)
describe(a)
describeBy(a)
describeBy(x)
describeBy(as.numeric(x))
describeBy(as.numeric(x$acf))
a =rbind(x$acf[1],0)
a
a =rbind(x$acf[1,],0)
x$acf[1]=rbind()
x$acf[1]=rbind(0)
x$acf
max(x$acf)
x$acf[1]=rbind(NA)
max(x$acf)
x$acf[1]=rbind(0)
max(x$acf)
RF <- ts(rf, start=c(2000,1), frequency=12)
ndvi <- ts(ndvi, start=c(2000,1), frequency=12)
####################################################################
# first approach: regression analysis using the original time-series
####################################################################
lm(RF)
####################################################################
# first approach: regression analysis using the original time-series
####################################################################
lm(as.numeric(RF))
####################################################################
# first approach: regression analysis using the original time-series
####################################################################
lm(as.numeric(RF)~rf)
####################################################################
# first approach: regression analysis using the original time-series
####################################################################
acf(RF)
####################################################################
# first approach: regression analysis using the original time-series
####################################################################
acf(as.numeric(RF))
####################################################################
# first approach: regression analysis using the original time-series
####################################################################
rf_acf=pacf(as.numeric(RF))
####################################################################
# first approach: regression analysis using the original time-series
####################################################################
rf_acf=acf(as.numeric(RF))
rf_acf$acf[1]=rbind(0)
rf_acf$acf
model=lm(as.numeric(ndvi)~max(rf_acf$acf))
model=lm(as.numeric(ndvi)~max(rf_acf))
model=lm(as.numeric(ndvi)~lag(as.numeric(rf),max(rf_acf$acf)))
model=lm(as.numeric(ndvi)~lag(as.numeric(rf),which(max(rf_acf$acf)))
model=lm(as.numeric(ndvi)~lag(as.numeric(rf),which(max(rf_acf$acf))))
cor(as.numeric(ndvi),as.numeric(rf),use="complete.obs") # data are correlated
model=lm(as.numeric(ndvi)~lag(as.numeric(rf),which(max(rf_acf$acf))))
which(max(rf_acf$acf))
which(rf_acf$acf,max(rf_acf$acf))
which(max(rf_acf$acf))
max(rf_acf$acf)
which(as.data.frame(rf_acf$acf),max(rf_acf$acf))
for (i in length(rf_acf$acf)){
if (rf_acf$acf[i]==max(rf_acf$acf)){
lagS=i}
}
model=lm(as.numeric(ndvi)~lag(as.numeric(rf),lags)))
lags=0
for (i in length(rf_acf$acf)){
if (rf_acf$acf[i]==max(rf_acf$acf)){
lags=i}
}
max(rf_acf$acf)
rf_acf$acf[i]
for (i in 1:length(rf_acf$acf)){
if (rf_acf$acf[i]==max(rf_acf$acf)){
lags=i}
}
lags
model=lm(as.numeric(ndvi)~lag(as.numeric(rf),lags)))
model=lm(as.numeric(ndvi)~lag(as.numeric(rf),lags))
summary(model)
library(raster)
library(dplyr)
library(ggplot2)
#import coordinates: 850 points
coor = read.csv("coordinates.csv")
coor = as.data.frame(coor)
#create random ndvi values
ndvi = runif(850,min=0,max=0.7 )
ndvi =as.data.frame(ndvi)
#create a new dataframe with x and y coordinates
df=data.frame(coor$x,coor$y)
colnames(df)=c("x","y")
head(df)
#create a new dataframe with x and y coordinates
df=data.frame(coor$x,coor$y)
setwd("D:/My Projects/R/Random NDVI values and plot")
#import coordinates: 850 points
coor = read.csv("coordinates.csv")
coor = as.data.frame(coor)
#create random ndvi values
ndvi = runif(850,min=0,max=0.7 )
ndvi =as.data.frame(ndvi)
#create a new dataframe with x and y coordinates
df=data.frame(coor$x,coor$y)
colnames(df)=c("x","y")
head(df)
#create an extent
ext=extent(min(df$x),min(df$y),max(df$x),max(df$y))
#create a new raster
new_raster=raster(ext,resolution=1)
#assign a coordinate system
crs(new_raster)=CRS(" +datum=ETRS89 ")
#create an ndvi raster
ndvi_raster=rasterize(df,new_raster,field=ndvi)
#plot the raster
plot(ndvi_raster,xlim=c(min(df$x),max(df$x)),
ylim=c(min(df$y),max(df$y)),xlab="X",ylab="Y",main="NDVI",
)
writeRaster(ndvi_raster,overwrite=TRUE,filename = "NDVI_raster.tif",extent=min(df$x),min(df$y),max(df$x),max(df$y))
setwd("D:/My Projects/Time Series/Create Random ndvi time series data")
#import points
coor = read.csv("points.csv")
coor = data.frame(coor)
#create random ndvi values
ndvi= runif(1000,min=0,max=1)
#create time interval
time_index=seq(from=as.Date("1995-11-11"),to=as.Date("2023-11-11"),by="6 months")
ndvi = as.data.frame(ndvi)
head(coor)
#clearing data
coor= data.frame(coor$x,coor$y)
head(coor)
colnames(coor)=c("x","y")
head(coor)
#create an empty raster data extended with the coordinates of "coor"
ext_rast= extent(min(coor$x),max(coor$x),min(coor$y),max(coor$y))
ext_rast
empty_raster= raster(ext)
empty_raster= raster(ext_rast)
empty_raster
image(empty_raster)
plot(empty_raster)
#assign all values in to empty_raster
ndvi_ts_raster= rasterize(empty_raster,ndvi)
#assign all values in to empty_raster
ndvi_ts_raster= rasterize(empty_raster,time_index,field=ndvi)
#assign all values in to empty_raster
ndvi_ts_raster= rasterize(coor,ext=empty_raster,field=ndvi)
#create an empty raster data extended with the coordinates of "coor"
ext_rast= extent(min(coor$x),min(coor$y),max(coor$x),max(coor$y))
empty_raster= raster(ext_rast,crs)
#create an empty raster data extended with the coordinates of "coor"
ext_rast= extent(min(coor$x),max(coor$x),min(coor$y),max(coor$y))
empty_raster= raster(ext_rast,c)
#create an empty raster data extended with the coordinates of "coor"
ext_rast= extent(min(coor$x),max(coor$x),min(coor$y),max(coor$y))
empty_raster= raster(ext_rast)
#assign all values in to empty_raster
ndvi_ts_raster= rasterize(coor,ext=empty_raster,field=ndvi)
#create an empty raster data extended with the coordinates of "coor"
ext_rast= extent(min(coor$x),min(coor$y),max(coor$x),max(coor$y))
empty_raster= raster(ext_rast)
#assign all values in to empty_raster
ndvi_ts_raster= rasterize(coor,ext=empty_raster,field=ndvi)
ext_rast
#create an empty raster data extended with the coordinates of "coor"
ext_rast= extent(min(coor$x),max(coor$x),min(coor$y),max(coor$y))
empty_raster= raster(ext_rast)
empty_raster
ext_rast
empty_raster= raster(ext_rast,resolution=1)
#assign all values in to empty_raster
ndvi_ts_raster= rasterize(coor,ext=empty_raster,field=ndvi)
setwd("D:/My Projects/Time Series/Create-Random-ndvi-time-series-data")
empty_raster
ndvi_ts_raster
#assign all values in to empty_raster
ndvi_ts_raster= rasterize(coor,ext=empty_raster,field=ndvi)
#assign all values in to empty_raster
ndvi_ts_raster= raster(coor,ext=empty_raster,field=ndvi)
crs(ext_rast) =CRS("+proj=utm +zone=30 +datum=WGS84")
crs(empty_raster) =CRS("+proj=utm +zone=30 +datum=WGS84")
#assign all values in to empty_raster
ndvi_ts_raster= rasterize(empty_raster,ext=ext_rast,field=ndvi)
library(raster)
#create random ndvi values
ndvi= runif(850,min=0,max=1)
ndvi = as.data.frame(ndvi)
#create time interval
time_index=seq(from=as.Date("1995-11-11"),to=as.Date("2023-11-11"),by="6 months")
#assign all values in to empty_raster
ndvi_ts_raster= rasterize(empty_raster,ext=ext_rast,field=ndvi)
